s apply : 
1. l apply returns a list since the input given to it is a list or vector, where list input contains various data types
2. But if the i/p contains same datatype, we dont necessarily have to have a list ouput by using l apply. For that we use s apply
3. s apply calls l apply and then returns a vector ( if there is any homogenous content). s apply simplies the output automatically.
4. s apply automatically assigns the names to the output that has been specified in the input vector/list.

Cases of s apply where simplifaction not possible/useless:
1. s apply does not simplify to vectors when the function returns values of more than length 1.
List of vectors containing unique_letters using n_char func. Gives same output as l apply. If simpli did not work, then it returns a list same as l apply
To overcome this, v apply is used
-----------------------------------------------------------------------------------------------------------------------------------------
temp
[[1]]
[1]  3  7  9  6 -1

[[2]]
[1]  6  9 12 13  5

[[3]]
[1]  4  8  3 -1 -3

[[4]]
[1]  1  4  7  2 -2

[[5]]
[1] 5 7 9 4 2

[[6]]
[1] -3  5  8  9  4

[[7]]
[1] 3 6 9 4 1

Solution:

# temp has already been defined in the workspace

# Use lapply() to find each day's minimum temperature
lapply(temp,min)

# Use sapply() to find each day's minimum temperature
sapply(temp,min)

# Use lapply() to find each day's maximum temperature
lapply(temp,max)
--------------------------------------------------------------------------------------------------------------------------------

2. To find the average of min and max in each list of temp - Here fn reurns only one value, s apply simplifies

# temp is already defined in the workspace

# Finish function definition of extremes_avg
extremes_avg <- function(x) {
  ( min(x) + max(x) ) / 2
}

# Apply extremes_avg() over temp using sapply()
sapply(temp,extremes_avg)

# Apply extremes_avg() over temp using lapply()
lapply(temp,extremes_avg)
# Use sapply() to find each day's maximum temperature
sapply(temp,max)
-------------------------------------------------------------------------------------------------------------------------
3. To find the min and max in each list of temp - Here fn returns more than one value, so s apply cannot simplify  -returns rows and columns

# temp is already available in the workspace

# Create a function that returns min and max of a vector: extremes
extremes <- function(x) {
  c(min = min(x), max = max(x))
}

# Apply extremes() over temp with sapply()
sapply(temp,extremes)

    [,1] [,2] [,3] [,4] [,5] [,6] [,7]
min   -1    5   -3   -2    2   -3    1
max    9   13    8    7    9    9    9

# Apply extremes() over temp with lapply()
lapply(temp,extremes)

[[1]]
min max 
 -1   9 

[[2]]
min max 
  5  13 

[[3]]
min max 
 -3   8 

[[4]]
min max 
 -2   7 

[[5]]
min max 
  2   9 

[[6]]
min max 
 -3   9 

[[7]]
min max 
  1   9 
