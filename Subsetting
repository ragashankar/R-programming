                                            BASICS
> x <- c("t","u","b","g","x","g")
> x
[1] "t" "u" "b" "g" "x" "g"
> x[1]
[1] "t"
> x[3]
[1] "b"
> x[2:4]
[1] "u" "b" "g"
> x[x>"b"]
[1] "t" "u" "g" "x" "g"
> x[x>"g"]
[1] "t" "u" "x"
> u <- x>"g"
> u
[1]  TRUE  TRUE FALSE FALSE  TRUE FALSE
> x[u]
[1] "t" "u" "x"
-------------------------------------------------------------------------------------------------------------------------
                                          LISTS
> lst <- list(foo = 1:4, bar=0.9)
> lst
$foo
[1] 1 2 3 4

$bar
[1] 0.9

> names(lst)
[1] "foo" "bar"
> lst[1]  # printing the first list
$foo
[1] 1 2 3 4

> lst[[1]] # printing the sequence and not a list
[1] 1 2 3 4
> lst$foo  # printing only the elements of foo
[1] 1 2 3 4
> lst$bar
[1] 0.9
> lst[["bar"]] # printing only the element and not list
[1] 0.9
> lst["bar"]
$bar
[1] 0.9

> lst[c(1,2)] # printing the first and second list
$foo
[1] 1 2 3 4

$bar
[1] 0.9

NOTE: Using '[]' prints the list. Using '$' or '[[ ]]' prints the element or sequence and not the list

NESTED ELEMENTS IN A LIST -----------
> lst1 <- list(a=list(10,12,14),b=c(2.81,3.94))
> lst1
$a
$a[[1]]
[1] 10

$a[[2]]
[1] 12

$a[[3]]
[1] 14


$b
[1] 2.81 3.94

> lst1[[c(1,3)]] # Prints the 3rd element in the 1st list
[1] 14
> lst1[[c(2,1)]] # prints the 1st element in the 2nd variable of the list
[1] 2.81
> lst1[[1]][[2]]
[1] 12
--------------------------------------------------------------------------------------------------------------------------------------
                                                      MATRICES
> matr <- matrix(1:6,nrow=2,ncol=3)
> matr
     [,1] [,2] [,3]
[1,]    1    3    5
[2,]    2    4    6
> matr[1,1] # Returns a vector and not same class(matrix), so an exception to '[]' rule with regards to matrix
[1] 1
> matr[1,1,drop = FALSE] # Prints the class matrix with specified element by making drop = FALSE , so the class matrix not dropped
     [,1]
[1,]    1
> matr[,2]
[1] 3 4
> matr[,2,drop=FALSE]
     [,1]
[1,]    3
[2,]    4
--------------------------------------------------------------------------------------------------------------------------------------
                                                    PARTIAL MATCHING
> y <- list(raghav = 1:5,gaayu=9:13,reshma= 15:21)
> y
$raghav
[1] 1 2 3 4 5

$gaayu
[1]  9 10 11 12 13

$reshma
[1] 15 16 17 18 19 20 21

> y$g
[1]  9 10 11 12 13
> y$re
[1] 15 16 17 18 19 20 21
> y$ra
[1] 1 2 3 4 5
> y[["a"]]
NULL
> y[["g"]]
NULL
> y[["g", exact=FALSE]]
[1]  9 10 11 12 13

-----------------------------------------------------------------------------------------------------------------------------------
                                                REMOVING MISSING VALUES
> f <- c(1,5,2,NA,3,4)
> g <- is.na(f)
> f[!g]
[1] 1 5 2 3 4
-------------------------
                                        USING COMPLETE CASES TO REMOVE NA VALUES (subsetting na)
> f <- c(1,5,2,NA,3,4,NA,8)
> h <- c("a","h","i","v",NA,"o",NA,"l")
> good <- complete.cases(f,h)  # Both f and h must have arguments of same length, then only complete cases work.
> good
[1]  TRUE  TRUE  TRUE FALSE FALSE  TRUE FALSE  TRUE
> f[good]
[1] 1 5 2 4 8
> h[good]
[1] "a" "h" "i" "o" "l"
-------------------------
> matr
     [,1] [,2] [,3]
[1,]    1    3    5
[2,]    2    4    6
> matr[2,1] <- NA
> matr
     [,1] [,2] [,3]
[1,]    1    3    5
[2,]   NA    4    6
> good <- complete.cases(matr)
> good
[1]  TRUE FALSE
> matr[good]
[1] 1 3 5
