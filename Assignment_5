Selection: 5

  |                                                                                         |   0%

| Missing values play an important role in statistics and data analysis. Often, missing values
| must not be ignored, but rather they should be carefully studied to see if there's an underlying
| pattern or cause for their missingness.

...

  |====                                                                                     |   5%

| In R, NA is used to represent any value that is 'not available' or 'missing' (in the statistical
| sense). In this lesson, we'll explore missing values further.

...

  |=========                                                                                |  10%

| Any operation involving NA generally yields NA as the result. To illustrate, let's create a
| vector c(44, NA, 5, NA) and assign it to a variable x.

> x <-c(44,NA,5,NA)

| You got it right!

  |=============                                                                            |  15%

| Now, let's multiply x by 3.

> x*3
[1] 132  NA  15  NA

| You got it right!

  |==================                                                                       |  20%

| Notice that the elements of the resulting vector that correspond with the NA values in x are
| also NA.

...

  |======================                                                                   |  25%

| To make things a little more interesting, lets create a vector containing 1000 draws from a
| standard normal distribution with y <- rnorm(1000).

> y<-rnorm(1000)

| You nailed it! Good job!

  |===========================                                                              |  30%

| Next, let's create a vector containing 1000 NAs with z <- rep(NA, 1000).

> z<-rep(NA,1000)

| That's the answer I was looking for.

  |===============================                                                          |  35%

| Finally, let's select 100 elements at random from these 2000 values (combining y and z) such
| that we don't know how many NAs we'll wind up with or what positions they'll occupy in our final
| vector -- my_data <- sample(c(y, z), 100).

> my_data<-sample(c(y,z),100)

| Great job!

  |====================================                                                     |  40%

| Let's first ask the question of where our NAs are located in our data. The is.na() function
| tells us whether each element of a vector is NA. Call is.na() on my_data and assign the result
| to my_na.

> my_na<-is.na(my_data)

| Great job!

  |========================================                                                 |  45%

| Now, print my_na to see what you came up with.

> my_na
  [1]  TRUE  TRUE FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE
 [16]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE FALSE  TRUE FALSE  TRUE FALSE
 [31] FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE FALSE FALSE FALSE
 [46]  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE FALSE FALSE FALSE
 [61]  TRUE  TRUE FALSE FALSE  TRUE  TRUE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
 [76]  TRUE FALSE FALSE  TRUE  TRUE  TRUE  TRUE FALSE FALSE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE
 [91]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE

| You got it!

  |============================================                                             |  50%

| Everywhere you see a TRUE, you know the corresponding element of my_data is NA. Likewise,
| everywhere you see a FALSE, you know the corresponding element of my_data is one of our random
| draws from the standard normal distribution.

...

  |=================================================                                        |  55%

| In our previous discussion of logical operators, we introduced the `==` operator as a method of
| testing for equality between two objects. So, you might think the expression my_data == NA
| yields the same results as is.na(). Give it a try.

> my_data==NA
  [1] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA
 [32] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA
 [63] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA
 [94] NA NA NA NA NA NA NA

| Excellent work!

  |=====================================================                                    |  60%

| The reason you got a vector of all NAs is that NA is not really a value, but just a placeholder
| for a quantity that is not available. Therefore the logical expression is incomplete and R has
| no choice but to return a vector of the same length as my_data that contains all NAs.

...

  |==========================================================                               |  65%

| Don't worry if that's a little confusing. The key takeaway is to be cautious when using logical
| expressions anytime NAs might creep in, since a single NA value can derail the entire thing.

...

  |==============================================================                           |  70%

| So, back to the task at hand. Now that we have a vector, my_na, that has a TRUE for every NA and
| FALSE for every numeric value, we can compute the total number of NAs in our data.

...

  |===================================================================                      |  75%

| The trick is to recognize that underneath the surface, R represents TRUE as the number 1 and
| FALSE as the number 0. Therefore, if we take the sum of a bunch of TRUEs and FALSEs, we get the
| total number of TRUEs.

...

  |=======================================================================                  |  80%

| Let's give that a try here. Call the sum() function on my_na to count the total number of TRUEs
| in my_na, and thus the total number of NAs in my_data. Don't assign the result to a new
| variable.

> sum(my_na)
[1] 54

| You are quite good my friend!

  |============================================================================             |  85%

| Pretty cool, huh? Finally, let's take a look at the data to convince ourselves that everything
| 'adds up'. Print my_data to the console.

> my_data
  [1]          NA          NA  1.30069663          NA  0.81280434 -0.98967952          NA
  [8] -0.74796754  0.22305084  1.02122982  0.34072274 -3.61544070 -0.04441197          NA
 [15]  0.20959425          NA          NA          NA          NA          NA          NA
 [22]          NA  1.37258568          NA          NA  0.60385694          NA  0.99567201
 [29]          NA -0.26406044 -0.42150917 -0.57055153 -0.14057784  0.73663273          NA
 [36]          NA          NA          NA  1.19761655          NA          NA          NA
 [43] -0.29520558  1.45906778  0.24093783          NA          NA  0.66240961          NA
 [50]          NA          NA          NA          NA          NA          NA -1.64580618
 [57]          NA  0.85430038 -0.06098608  0.17604382          NA          NA  1.47008108
 [64] -0.39585707          NA          NA -0.78772494          NA  1.16065291 -0.78044054
 [71] -0.23415671 -0.15141968 -1.25082971  0.91500115  0.13074208          NA  0.19601519
 [78]  0.31833090          NA          NA          NA          NA  0.63949640 -1.53616114
 [85]          NA -0.01004615          NA          NA          NA          NA          NA
 [92]          NA          NA          NA          NA          NA  1.40626373  1.00632042
 [99] -0.05966255  1.89116939

| You nailed it! Good job!

  |================================================================================         |  90%

| Now that we've got NAs down pat, let's look at a second type of missing value -- NaN, which
| stands for 'not a number'. To generate NaN, try dividing (using a forward slash) 0 by 0 now.

> o/o
Error: object 'o' not found
> 0/0
[1] NaN

| That's the answer I was looking for.

  |=====================================================================================    |  95%

| Let's do one more, just for fun. In R, Inf stands for infinity. What happens if you subtract Inf
| from Inf?

> Inf-Inf
[1] NaN

| You are quite good my friend!

  |=========================================================================================| 100%

| Would you like to receive credit for completing this course on Coursera.org?

1: Yes
2: No

Selection: 1
What is your email address? rshanka1@mtu.edu
What is your assignment token? F1IC9rVtgd2VGSbE
Grade submission succeeded!

| Perseverance, that's the answer.

| You've reached the end of this lesson! Returning to the main menu...
