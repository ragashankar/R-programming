In R, dates are represented by Date objects, while times are represented by POSIXct objects. Under the hood, however, these dates and times are simple numerical values. Date objects store the number of days since the 1st of January in 1970. POSIXct objects on the other hand, store the number of seconds since the 1st of January in 1970.

The 1st of January in 1970 is the common origin for representing times and dates in a wide range of programming languages. There's is no particular reason for this, it is a simple convention. Of course, it's also possible to create dates and times before 1970, the corresponding numerical values are simply negative in this case.


# Get the current date: today

today <- Sys.Date()
# See what today looks like under the hood

unclass(today)
# Get the current time: now

now <- Sys.time()
# See what now looks like under the hood
unclass(now)
------------------------------------------------------------------------------------------------------------------------------
To create a Date object from a simple character string in R, you can use the as.Date() function. The character string has to obey a format that can be defined using a set of symbols (the examples correspond to 13 January, 1982):

%Y: 4-digit year (1982)
%y: 2-digit year (82)
%m: 2-digit month (01)
%d: 2-digit day of the month (13)
%A: weekday (Wednesday)
%a: abbreviated weekday (Wed)
%B: month (January)
%b: abbreviated month (Jan)

--------------------------------------------------------------------

1. # Definition of character strings representing dates
str1 <- "May 23, '96"
str2 <- "2012-03-15"
str3 <- "30/January/2006"

# Convert the strings to dates: date1, date2, date3
date1 <- as.Date(str1, format = "%b %d, '%y")

date2 <- as.Date(str2, format = "%Y-%m-%d")

date3 <- as.Date(str3, format = "%d/%B/%Y")

# Convert dates to formatted strings
format(date1, "%A")
format(date2,"%d")
format(date3,"%b %Y")
--------------------------------------------------------------------------
2. Convert two strings that represent a timestamp, str1 and str2 to POSIXct objects, time1 and time2.
Using format(), create a string from time1 containing only the minutes.
From time2, extract the hours and minutes as "hours:minutes AM/PM". Use ?strptime to find the correct conversion symbols!
# Definition of character strings representing times
str1 <- "May 23, '96 hours:23 minutes:01 seconds:45"
str2 <- "2012-3-12 14:23:08"

Solution:

# Convert the strings to POSIXct objects: time1, time2
time1 <- as.POSIXct(str1, format = "%B %d, '%y hours:%H minutes:%M seconds:%S")
time2 <- as.POSIXct(str2, format = "%Y-%m-%d %H:%M:%S")

# Convert times to formatted strings
format(time1,"%M")
format(time2,"%I:%M %p")
--------------------------------------------------------------------------------
3. Calculate the number of days that passed between the last and the first day you ate pizza. Print the result.
Use the function diff() on pizza to calculate the differences between consecutive pizza days. Store the result in a new variable day_diff.
Calculate the average period between two consecutive pizza days. Print the result.

Soln:

# day1, day2, day3, day4 and day5 are already available in the workspace

# Difference between last and first pizza day
day5-day1

# Create vector pizza
pizza <- c(day1, day2, day3, day4, day5)

# Create differences between consecutive pizza days: day_diff

day_diff <- diff(pizza)
# Average period between two consecutive pizza days
mean(day_diff)
----------------------------------------------------------------
4. Calculate the difference between the two vectors logout and login, i.e. the time the user was online in each independent session. Store the result in a variable time_online.
Inspect the variable time_online by printing it.
Calculate the total time that the user was online. Print the result.
Calculate the average time the user was online. Print the result.

> login
[1] "2016-08-27 10:18:04 UTC" "2016-09-01 09:14:18 UTC"
[3] "2016-09-01 12:21:51 UTC" "2016-09-01 12:37:24 UTC"
[5] "2016-09-03 21:37:55 UTC"
> logout
[1] "2016-08-27 10:56:29 UTC" "2016-09-01 09:14:52 UTC"
[3] "2016-09-01 12:35:48 UTC" "2016-09-01 13:17:22 UTC"
[5] "2016-09-03 22:08:47 UTC"

Soln:

# login and logout are already defined in the workspace
# Calculate the difference between login and logout: time_online
time_online <- logout - login

# Inspect the variable time_online

time_online
# Calculate the total time online

sum(time_online)
# Calculate the average time online
mean(time_online)

-----------------------------------------------------------------------------------------
5. Use as.Date() to convert the astro vector to a vector containing Date objects. You will need the %d, %b and %Y symbols to specify the format. Store the resulting vector as astro_dates.
Use as.Date() to convert the meteo vector to a vector with Date objects. This time, you will need the %B, %d and %y symbols for the format argument. Store the resulting vector as meteo_dates.
With a combination of max(), abs() and -, calculate the maximum absolute difference between the astronomical and the meteorological beginnings of a season, i.e. astro_dates and meteo_dates. Simply print this maximum difference to the console output.

> astro
       spring        summer          fall        winter 
"20-Mar-2015" "25-Jun-2015" "23-Sep-2015" "22-Dec-2015" 
> meteo
           spring            summer              fall            winter 
    "March 1, 15"      "June 1, 15" "September 1, 15"  "December 1, 15" 
    
Soln:

# Convert astro to vector of Date objects: astro_dates

astro_dates <- as.Date(astro, format = "%d-%b-%Y")
# Convert meteo to vector of Date objects: meteo_dates

meteo_dates <- as.Date(meteo,format = "%B %d, %y")
# Calculate the maximum absolute difference between astro_dates and meteo_dates
max(abs(astro_dates-meteo_dates))

