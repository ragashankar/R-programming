Display the structure of logs. It appears to be a list of lists, interesting.
Use list subsetting to print out the details component of the 11th element of logs.
Use class() to print out the class of the timestamp component of the first entry of logs.

# logs is already available in your workspace

# Print the structure of logs
str(logs)

# Use list subsetting to print the details part of 11th logs entry
logs[11]

# Print the class of the timestamp component of the first entry
class(logs[[1]]$timestamp)

-----------------------------------------------------------------------------------------------------
As a data scientist, suppose you want to know how many entries there were before the first failure message. One way to go about this is to write a simple while loop that goes through each log entry in logs, prints out the entry number, and stops when it sees the first failure message, that is, when the success element is FALSE. The last number printed to the console is the number of entries before the first failure message was logged.
Start with defining an iterator, i, equal to 1, outside of the while loop.
Inside the while loop's condition, check if the success element of logs[[i]] is TRUE.
Inside the while loop's condition:
First print out i and
Next, increase i by 1. This is important!

# logs is available in your workspace

# Initialize the iterator i to be 1
i=1

# Code the while loop
while ( logs[[i]]$success==TRUE ) {
  print(i)
  i=i+1
}
---------------------------------------------------------------------------------------------------------
Initialize two variables: i, to 1 as before, and found, to FALSE.
Write a while loop that:
keeps running as long as found is FALSE.
Checks if logs[[i]]$success is FALSE and logs[[i]]$details$location equals "waste". You'll need to use the && sign here. This causes the evaluation of the condition to halt as soon as the result of the condition is known; if logs[[i]]$success is TRUE, it's certain that the condition will be FALSE, so the next comparison is not evaluated anymore.
prints out "found" and sets found to TRUE if the above condition holds.
prints out "still looking" and increment i if the above condition does not hold.

# logs is available in your workspace

# Initialize i and found
i <- 1
found <- FALSE

# Code the while loop
while (found == FALSE) {
  if (logs[[i]]$success == FALSE && logs[[i]]$details$location == "waste") {
    print("found")
    found = TRUE
  } else {
    print("still looking")
    i=i+1
  }
}
------------------------------------------------------------------------------------------------------------
Add an if statement such that the for loop only prints the timestamp if the log in question represents a success, i.e. if its success element is TRUE.
# logs is available in your workspace

# Make the printout conditional: only if success
for (log in 1:length(logs)) {
if(logs[[log]]$success == TRUE){
    print(logs[[log]]$timestamp) 
}
   
}
------------------------------------------------------------------------------------------------------------
Finish the for loop in the sample code; after running it, each entry in logs should contain a date element. This should b a Date object that you can build from the timestamp element with as.Date().
Print the first 6 elements in logs by calling the head() function on logs. Is the date information in there now?

# logs is available in your workspace

# Finish the for loop: add date element for each entry
for (i in 1:length(logs)) {
  logs[[i]]$date <- as.Date(logs[[i]]$timestamp)
}

# Print first 6 elements in logs
head(logs)

--------------------------------------------------------------------------------------------------------------
Initialize an empty list, failures using the list() function without arguments.
Finish the for loop such that each log entry that indicates a failure is added to failures.
Display the structure of the failures list that results.

# logs is available in your workspace

# Intialize empty list: failures
failures <- list()

# Finish the for loop: add each failure to failures
for (i in 1:length(logs)) {
  if (logs[[i]]$success == FALSE) {
    failures <- c(failures, list(logs[[i]]))
  }
}

# Display the structure of failures
str(failures)

----------------------------------------------------------------------------------------------------
