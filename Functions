 add2 <- function(x,y){
+     x+y
+ }
> add2(3,5)
[1] 8
> above10 <- function(x){
+     use <- x > 10
+     x[use]
+ }
> above10(3)
numeric(0)
> above10(11)
[1] 11
> above10(10)
numeric(0)
> above10(100)
[1] 100
> above10(100)
[1] 100
> above <- function(x,n){
+     use <- x > n
+     x[use]
+ }
> above(3,4)
numeric(0)
> above(5,4)
[1] 5
> above(10,4)
[1] 10
> above(c(56,78,99,344),45)
[1]  56  78  99 344
> above(c(56,78,99,344),100)
[1] 344
> above10 <- function(x,n=10){
+     use <- x > n
+     x[use]
+ }
> above10(3)
numeric(0)
> above10(78)
[1] 78
------------------------------------------------------
> colMeans
function(y){
    i <- ncol(y)
    means <- numeric(i)
    for (j in 1:i){
        means[j] <- mean(y[,j])
}
means
}
------------------------------------------------
                                              LAZY EVALUATION
 fn <- function(a){
+     a^2
+     a+9
+ }
> fn(4)
[1] 13 (returns the result of the last operation in the function)

----------------------------------------------------
                                                   '...' Argument
'...' is indicated when other parameters are take as default. 
-----------------------------------------------------------------------------------------------------------------------------------
                                                   Scoping in R
If a func 'lm' is defined in global env, then R takes this s a func and not linera model fn .
uses lexical scoping or static scoping - example:

a=1
b=2
f<-function(x)
{
  a*x + b
}
g<-function(x)
{
  a=2
  b=1
  f(x)
}
g(2)

g is called outside the functions, a=1 and b=2 are defined globally, so it takes a as 1 and b as 2. This is leical scoping

Rules for lexical scoping:
If a value present in the fn is not found under that enviro, then R searches parent environ until its hits empty. the error is thrown

---------------------------------------------------scoping------------------------------------------------------------------
> make.power <- function(x){
+     pow <- function(n){
+         n^x
+ }
+ pow
+ }
c <- make.power(4)
c(2)
> 16
